#!/usr/bin/env node

import { config } from 'dotenv';
import { getJson } from 'serpapi';
import fs from 'fs';

// Cargar variables de entorno
config();

console.log('üîç VERIFICACI√ìN COMPLETA DE CONFIGURACI√ìN SERPAPI');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

const API_KEY = process.env.SERPAPI_API_KEY;
const SCHOLAR_ID = 'PCALePwAAAAJ'; // Roberto S√°nchez-Reolid

console.log(`üìã Configuraci√≥n actual:`);
console.log(`   ‚Ä¢ API Key: ${API_KEY ? API_KEY.slice(0, 10) + '...' + API_KEY.slice(-4) : 'NO CONFIGURADA'}`);
console.log(`   ‚Ä¢ Scholar ID: ${SCHOLAR_ID}`);
console.log(`   ‚Ä¢ Archivo .env: ${fs.existsSync('.env') ? '‚úÖ Existe' : '‚ùå No encontrado'}`);

if (!API_KEY) {
    console.error('‚ùå Error: SERPAPI_API_KEY no encontrada en variables de entorno');
    console.log('\nüìù Para configurar:');
    console.log('   1. Edita el archivo .env');
    console.log('   2. A√±ade: SERPAPI_API_KEY=tu_api_key_aqui');
    process.exit(1);
}

console.log('\nüß™ Probando conectividad b√°sica...');

async function testBasicConnection() {
    try {
        const result = await getJson({
            engine: 'google_scholar_author',
            author_id: SCHOLAR_ID,
            api_key: API_KEY,
            num: 5 // Solo 5 publicaciones para test
        });
        
        if (result.error) {
            console.error('‚ùå Error de API:', result.error);
            return false;
        }
        
        console.log('‚úÖ Conexi√≥n exitosa!');
        console.log(`üìä Datos obtenidos:`);
        console.log(`   ‚Ä¢ Autor: ${result.author?.name || 'No disponible'}`);
        console.log(`   ‚Ä¢ Afiliaci√≥n: ${result.author?.affiliation || 'No disponible'}`);
        console.log(`   ‚Ä¢ Total citas: ${result.author?.cited_by?.table?.[0]?.citations?.all || 'No disponible'}`);
        console.log(`   ‚Ä¢ √çndice h: ${result.author?.cited_by?.table?.[0]?.h_index?.all || 'No disponible'}`);
        console.log(`   ‚Ä¢ Publicaciones encontradas: ${result.articles?.length || 0}`);
        
        if (result.articles && result.articles.length > 0) {
            console.log(`   ‚Ä¢ Primera publicaci√≥n: "${result.articles[0].title?.slice(0, 50)}..."`);
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error de conexi√≥n:', error.message || error);
        console.error('‚ùå Detalles del error:', JSON.stringify(error, null, 2));
        
        const errorMessage = error.message || error.toString() || '';
        if (errorMessage.includes('run out of searches') || errorMessage.includes('limit')) {
            console.log('\nüí° El l√≠mite mensual de b√∫squedas se ha agotado.');
            console.log('   Opciones:');
            console.log('   1. Esperar a que se renueve el l√≠mite mensual');
            console.log('   2. Usar una cuenta SerpAPI diferente');
            console.log('   3. Usar el script ultra-optimizado (solo 1-2 requests)');
        }
        
        return false;
    }
}

console.log('\nüîß Verificando scripts de scraping...');

const scripts = [
    'scripts/scrape-scholar.js',
    'scripts/scrape-scholar-advanced.js', 
    'scripts/scrape-scholar-optimized.js',
    'scripts/scrape-scholar-ultra-optimized.js'
];

scripts.forEach(script => {
    const exists = fs.existsSync(script);
    console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${script}`);
});

async function main() {
    const connectionTest = await testBasicConnection();
    
    console.log('\nüìã RESUMEN:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üîë API Key: ${API_KEY ? '‚úÖ Configurada' : '‚ùå Faltante'}`);
    console.log(`üåê Conectividad: ${connectionTest ? '‚úÖ Exitosa' : '‚ùå Fallida'}`);
    console.log(`üìÅ Scripts: ${scripts.filter(s => fs.existsSync(s)).length}/${scripts.length} disponibles`);
    
    if (connectionTest) {
        console.log('\nüöÄ RECOMENDACI√ìN: Usar script ultra-optimizado');
        console.log('   npm run scholar:scrape-ultra');
        console.log('   (Solo usa 1-2 requests de API)');
    } else {
        console.log('\n‚è≥ Esperar renovaci√≥n del l√≠mite o cambiar API key');
    }
}

main().catch(console.error);
