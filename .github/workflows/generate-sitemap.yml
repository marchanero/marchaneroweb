name: Generate Sitemap

on:
  # Ejecutar cuando se actualice la rama principal
  push:
    branches: [main]
    paths:
      - 'src/pages/**'
  # Permitir ejecución manual
  workflow_dispatch:
  # Ejecutar semanalmente para asegurar que está actualizado
  schedule:
    - cron: '0 0 * * 1'  # Cada lunes a medianoche

jobs:
  generate-sitemap:
    name: Generate XML Sitemap
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Build del sitio
        run: npm run build
        
      - name: Crear sitemap.xml
        run: |
          # Asegurarse de que tenemos la herramienta necesaria
          npm install --no-save sitemap-generator-cli
          
          # Crear script para generar el sitemap
          cat > sitemap-generator.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // URL base del sitio
          const baseUrl = 'https://roberto-sreolid.netlify.app';
          
          // Función para escanear el directorio dist y encontrar archivos HTML
          function scanDir(dirPath, baseDir = '') {
            const entries = fs.readdirSync(dirPath, { withFileTypes: true });
            let urls = [];
            
            for (const entry of entries) {
              const fullPath = path.join(dirPath, entry.name);
              const relativePath = path.join(baseDir, entry.name);
              
              if (entry.isDirectory()) {
                // Escanear subdirectorios recursivamente
                urls = urls.concat(scanDir(fullPath, relativePath));
              } else if (entry.name === 'index.html') {
                // Convertir rutas de archivos index.html a URLs
                const urlPath = baseDir === '' ? '/' : `/${baseDir}/`;
                urls.push(urlPath);
              } else if (entry.name.endsWith('.html')) {
                // Otras páginas HTML que no son index
                const urlPath = `/${relativePath.replace(/\.html$/, '')}`;
                urls.push(urlPath);
              }
            }
            
            return urls;
          }
          
          // Generar XML del sitemap
          function generateSitemap(urls) {
            const today = new Date().toISOString().split('T')[0];
            
            let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
            xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"\n';
            xml += '        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n';
            xml += '        xmlns:xhtml="http://www.w3.org/1999/xhtml"\n';
            xml += '        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9\n';
            xml += '        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">\n';
            
            // Añadir cada URL
            urls.forEach(url => {
              xml += '  <url>\n';
              xml += `    <loc>${baseUrl}${url}</loc>\n`;
              xml += `    <lastmod>${today}</lastmod>\n`;
              
              // Prioridad basada en la profundidad de la URL
              const depth = (url.match(/\//g) || []).length;
              const priority = Math.max(0.5, 1 - (depth - 1) * 0.2).toFixed(1);
              xml += `    <priority>${priority}</priority>\n`;
              
              xml += '  </url>\n';
            });
            
            xml += '</urlset>';
            return xml;
          }
          
          // Iniciar el proceso
          try {
            console.log('Escaneando el directorio dist para generar sitemap.xml...');
            const distDir = path.join(__dirname, 'dist');
            const urls = scanDir(distDir);
            
            console.log(`Se encontraron ${urls.length} URLs para incluir en el sitemap:`);
            urls.forEach(url => console.log(`- ${url}`));
            
            // Generar el XML
            const sitemap = generateSitemap(urls);
            
            // Guardar el sitemap.xml
            fs.writeFileSync(path.join(distDir, 'sitemap.xml'), sitemap);
            console.log('sitemap.xml generado correctamente.');
            
            // También guardar una copia para el repositorio
            fs.writeFileSync(path.join(__dirname, 'sitemap.xml'), sitemap);
            console.log('Copia del sitemap.xml guardada en la raíz del repositorio.');
          } catch (error) {
            console.error('Error generando el sitemap:', error);
            process.exit(1);
          }
          EOF
          
          # Ejecutar el script
          node sitemap-generator.js
          
      - name: Mostrar sitemap generado
        run: |
          echo "Sitemap generado:"
          cat dist/sitemap.xml
          
      - name: Añadir sitemap.xml al build
        run: |
          # Copiar el sitemap.xml al directorio de publicación si no está allí
          if [ ! -f dist/sitemap.xml ]; then
            cp sitemap.xml dist/
          fi
          
          # Optimizar el sitemap
          sed -i 's/xmlns="/xmlns="/g' dist/sitemap.xml
          
      - name: Guardar sitemap generado
        uses: actions/upload-artifact@v4
        with:
          name: sitemap
          path: dist/sitemap.xml
          
      - name: Commit del sitemap al repositorio
        if: github.ref == 'refs/heads/main'
        run: |
          # Comprobar si hay cambios
          if [ -f sitemap.xml ] && git diff --quiet -- sitemap.xml; then
            echo "El sitemap.xml no tiene cambios, no se realizará commit."
            exit 0
          fi
          
          # Configurar git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Agregar el sitemap y hacer commit
          git add sitemap.xml
          git commit -m "Actualiza sitemap.xml [skip ci]"
          
          # Push con el token de autenticación
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
