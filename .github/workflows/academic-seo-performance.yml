name: Academic SEO & Performance

on:
  push:
    branches: [ main ]
  # Ejecución programada cada semana
  schedule:
    - cron: '0 10 * * 3'  # Cada miércoles a las 10:00 AM UTC
  # Permite ejecutar manualmente
  workflow_dispatch:

jobs:
  academic-seo:
    name: Academic SEO Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Build del sitio
        run: npm run build

      - name: Ejecutar pruebas específicas de SEO académico
        run: |
          npx jest --config=jest.config.cjs test/advanced-seo.test.cjs
          
      - name: Verificar metadatos académicos
        run: |
          echo "Verificando presencia de metadatos académicos..."
          # Comprobar meta tags específicas para académicos
          grep -r "keywords" --include="*.html" dist/ | grep -i "investigación\|UCLM\|Roberto Sánchez" || echo "⚠️ Falta información de palabras clave académicas"
          grep -r "author" --include="*.html" dist/ | grep -i "Roberto Sánchez Reolid" || echo "⚠️ Falta meta tag de autor"
          
          # Comprobar Open Graph académico
          grep -r "og:type" --include="*.html" dist/ || echo "⚠️ Falta Open Graph type"
          grep -r "og:title" --include="*.html" dist/ || echo "⚠️ Falta Open Graph title"
          
          echo "Verificación de metadatos completada."

  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: academic-seo

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Build del sitio
        run: npm run build

      - name: Instalar Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Ejecutar Lighthouse CI
        run: |
          # Iniciar servidor en segundo plano
          npx serve dist -l 8080 &
          SERVER_PID=$!
          
          # Esperar a que el servidor esté disponible
          sleep 5
          
          # Ejecutar Lighthouse CI
          lhci autorun --collect.url=http://localhost:8080 --collect.settings.preset=desktop --upload.target=temporary-public-storage || echo "Lighthouse CI completado con advertencias."
          
          # Detener el servidor
          kill $SERVER_PID

      - name: Análisis de tamaño de assets
        run: |
          echo "## Análisis de tamaño de assets" > size-report.md
          echo "Fecha: $(date)" >> size-report.md
          echo "" >> size-report.md
          echo "### JavaScript" >> size-report.md
          find dist -name "*.js" -exec du -h {} \; | sort -hr >> size-report.md
          echo "" >> size-report.md
          echo "### CSS" >> size-report.md
          find dist -name "*.css" -exec du -h {} \; | sort -hr >> size-report.md
          echo "" >> size-report.md
          echo "### Imágenes" >> size-report.md
          find dist -name "*.jpg" -o -name "*.png" -o -name "*.webp" -o -name "*.avif" -exec du -h {} \; | sort -hr >> size-report.md
          
      - name: Guardar informe de tamaño
        uses: actions/upload-artifact@v4
        with:
          name: size-report
          path: size-report.md
