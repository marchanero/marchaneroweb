name: Google Scholar Citation Check

on:
  # Ejecución trimestral
  schedule:
    - cron: '0 9 1 */3 *'  # El primer día de cada trimestre a las 9:00 AM UTC
  # Permite ejecutar manualmente
  workflow_dispatch:

jobs:
  check-scholar-citations:
    name: Check Google Scholar Citations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Instalar dependencias
        run: |
          pip install scholarly requests beautifulsoup4 pandas matplotlib seaborn

      - name: Extraer datos de Google Scholar
        run: |
          cat > scholar_check.py << 'EOF'
          import os
          import sys
          import json
          import time
          from datetime import datetime
          import pandas as pd
          import matplotlib.pyplot as plt
          import seaborn as sns
          from scholarly import scholarly

          # Configuración
          SCHOLAR_ID = "YOUR_SCHOLAR_ID"  # Reemplazar con el ID de Google Scholar
          
          try:
              # Buscar el perfil por ID
              print(f"Buscando perfil con ID: {SCHOLAR_ID}")
              author = scholarly.search_author_id(SCHOLAR_ID)
              
              if not author:
                  print("Perfil no encontrado. Intentando búsqueda por nombre...")
                  # Alternativa: buscar por nombre
                  search_query = scholarly.search_author('Roberto Sánchez Reolid')
                  author = next(search_query)
              
              # Obtener información completa del perfil
              author_info = scholarly.fill(author)
              
              # Guardar información del perfil
              profile_data = {
                  "name": author_info.get('name', 'N/A'),
                  "affiliation": author_info.get('affiliation', 'N/A'),
                  "interests": author_info.get('interests', []),
                  "citedby": author_info.get('citedby', 0),
                  "h_index": author_info.get('hindex', 0),
                  "i10_index": author_info.get('i10index', 0),
                  "url_picture": author_info.get('url_picture', '')
              }
              
              print(f"Información del perfil obtenida: {profile_data['name']}")
              
              # Obtener publicaciones
              publications = []
              for pub in author_info.get('publications', []):
                  pub_filled = scholarly.fill(pub)
                  publications.append({
                      "title": pub_filled.get('bib', {}).get('title', 'N/A'),
                      "year": pub_filled.get('bib', {}).get('pub_year', 'N/A'),
                      "journal": pub_filled.get('bib', {}).get('journal', 'N/A'),
                      "citations": pub_filled.get('num_citations', 0)
                  })
                  # No hacer demasiadas solicitudes rápidas
                  time.sleep(1)
              
              # Ordenar por citas
              publications.sort(key=lambda x: x['citations'], reverse=True)
              
              # Guardar datos en JSON
              output_data = {
                  "profile": profile_data,
                  "publications": publications,
                  "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
              }
              
              with open('scholar_data.json', 'w') as f:
                  json.dump(output_data, f, indent=2)
              
              print(f"Datos guardados en scholar_data.json")
              
              # Crear visualizaciones
              if publications:
                  # Preparar datos para visualización
                  pub_df = pd.DataFrame(publications)
                  
                  # Gráfico de citas por publicación (top 10)
                  plt.figure(figsize=(12, 8))
                  top_pubs = pub_df.sort_values('citations', ascending=False).head(10)
                  
                  # Crear gráfico de barras
                  sns.set_style('whitegrid')
                  chart = sns.barplot(data=top_pubs, y='title', x='citations', palette='viridis')
                  plt.title(f'Top 10 Publicaciones por Citas - Dr. {profile_data["name"]}')
                  plt.xlabel('Número de Citas')
                  plt.ylabel('Publicación')
                  plt.tight_layout()
                  plt.savefig('top_citations.png')
                  print("Gráfico de citas generado")
                  
                  # Estadísticas por año
                  if 'year' in pub_df.columns:
                      # Convertir a numérico si es posible
                      pub_df['year'] = pd.to_numeric(pub_df['year'], errors='coerce')
                      yearly_stats = pub_df.groupby('year').agg({'citations': 'sum'}).reset_index()
                      
                      plt.figure(figsize=(12, 6))
                      chart = sns.lineplot(data=yearly_stats, x='year', y='citations', marker='o', linewidth=2.5)
                      plt.title('Evolución de Citas por Año')
                      plt.xlabel('Año')
                      plt.ylabel('Total de Citas')
                      plt.tight_layout()
                      plt.savefig('citations_by_year.png')
                      print("Gráfico de evolución temporal generado")
                  
              print("Análisis completado con éxito")
              
          except Exception as e:
              print(f"Error en la extracción de datos: {str(e)}")
              sys.exit(1)
          EOF

          # Ejecutar el script
          python scholar_check.py || echo "Advertencia: El script de Scholar no ha podido completarse"
          
      - name: Generar informe de citas
        id: scholar_data
        if: always()
        run: |
          echo "## Informe de Citas Académicas" > citation_report.md
          echo "Fecha: $(date)" >> citation_report.md
          echo "" >> citation_report.md
          
          if [ -f "scholar_data.json" ]; then
            echo "### Perfil académico" >> citation_report.md
            CITED_BY=$(jq -r '.profile.citedby' scholar_data.json)
            H_INDEX=$(jq -r '.profile.h_index' scholar_data.json)
            NAME=$(jq -r '.profile.name' scholar_data.json)
            AFFIL=$(jq -r '.profile.affiliation' scholar_data.json)
            
            # Guardar como variables de entorno y outputs
            echo "CITED_BY=$CITED_BY" >> $GITHUB_ENV
            echo "H_INDEX=$H_INDEX" >> $GITHUB_ENV
            echo "SCHOLAR_NAME=$NAME" >> $GITHUB_ENV
            echo "SCHOLAR_AFFIL=$AFFIL" >> $GITHUB_ENV
            
            echo "cited_by=$CITED_BY" >> $GITHUB_OUTPUT
            echo "h_index=$H_INDEX" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
            
            echo "- **Investigador:** $NAME" >> citation_report.md
            echo "- **Institución:** $AFFIL" >> citation_report.md
            echo "- **Citas totales:** $CITED_BY" >> citation_report.md
            echo "- **Índice h:** $H_INDEX" >> citation_report.md
            echo "" >> citation_report.md
            
            echo "### Publicaciones más citadas" >> citation_report.md
            jq -r '.publications | sort_by(-.citations) | .[0:5] | .[] | "- **\(.title)** (\(.year)) - \(.citations) citas"' scholar_data.json >> citation_report.md
          else
            echo "No se ha podido obtener información de Google Scholar" >> citation_report.md
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Guardar informe y visualizaciones
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scholar-citation-report
          path: |
            scholar_data.json
            citation_report.md
            *.png
          
      - name: Crear issue con resultados
        if: success()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: 'Actualización de métricas académicas - $(date +"%B %Y")'
          content-filepath: citation_report.md
          labels: academic-metrics, citations, research
          
      - name: Notificar métricas por Telegram
        if: success() && ${{ secrets.TELEGRAM_TO != '' && secrets.TELEGRAM_TOKEN != '' }}
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            📊 *Actualización trimestral de métricas académicas*
            
            *Dr. Roberto Sánchez Reolid - UCLM*
            
            ${{ steps.scholar_data.outputs.success == 'true' && format('
            📚 Citas totales: `{0}`
            📈 Índice h: `{1}`
            👨‍🔬 Investigador: {2}
            🏫 Institución: {3}
            
            📝 Ver informe completo en el repositorio
            ', env.CITED_BY, env.H_INDEX, env.SCHOLAR_NAME, env.SCHOLAR_AFFIL) || '
            ⚠️ No se pudieron recuperar los datos de Google Scholar
            ' }}
            
            _Universidad de Castilla-La Mancha - Grupo de Investigación_
          format: markdown
          photo: ${{ steps.scholar_data.outputs.success == 'true' && 'citations_by_year.png' || '' }}
