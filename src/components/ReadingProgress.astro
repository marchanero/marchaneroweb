---
// Componente de progreso de lectura para artículos largos
interface Props {
  showOnPages?: string[];
  color?: string;
}

const { 
  showOnPages = ['/publicaciones', '/proyectos', '/cv'],
  color = 'rgb(59, 130, 246)'
} = Astro.props;
---

<div id="reading-progress" class="reading-progress">
  <div id="progress-bar" class="progress-bar"></div>
</div>

<script define:vars={{ showOnPages, color }}>
  document.addEventListener('DOMContentLoaded', () => {
    const progressContainer = document.getElementById('reading-progress');
    const progressBar = document.getElementById('progress-bar');
    
    // Solo mostrar en páginas específicas
    const currentPath = window.location.pathname;
    const shouldShow = showOnPages.some(page => currentPath.includes(page));
    
    if (!shouldShow || !progressContainer || !progressBar) {
      if (progressContainer) progressContainer.style.display = 'none';
      return;
    }
    
    // Configurar color
    progressBar.style.background = `linear-gradient(90deg, ${color}, ${color}99)`;
    
    let ticking = false;
    
    function updateProgress() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = Math.min((scrollTop / scrollHeight) * 100, 100);
      
      progressBar.style.width = `${progress}%`;
      
      // Mostrar/ocultar basado en el progreso
      if (progress > 5) {
        progressContainer.classList.add('visible');
      } else {
        progressContainer.classList.remove('visible');
      }
      
      ticking = false;
    }
    
    function requestProgressUpdate() {
      if (!ticking) {
        requestAnimationFrame(updateProgress);
        ticking = true;
      }
    }
    
    window.addEventListener('scroll', requestProgressUpdate);
    window.addEventListener('resize', requestProgressUpdate);
    
    // Actualización inicial
    updateProgress();
  });
</script>

<style>
  .reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: rgba(0, 0, 0, 0.1);
    z-index: 1000;
    opacity: 0;
    transform: translateY(-3px);
    transition: all 0.3s ease;
  }
  
  .dark .reading-progress {
    background: rgba(255, 255, 255, 0.1);
  }
  
  .reading-progress.visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  .progress-bar {
    height: 100%;
    width: 0%;
    background: linear-gradient(90deg, rgb(59, 130, 246), rgba(59, 130, 246, 0.6));
    border-radius: 0 2px 2px 0;
    transition: width 0.1s ease-out;
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
  }
  
  /* Animación de pulso sutil */
  .progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 2px;
    height: 100%;
    background: rgba(255, 255, 255, 0.8);
    animation: pulse-reading 2s ease-in-out infinite;
  }
  
  @keyframes pulse-reading {
    0%, 100% { opacity: 0.8; }
    50% { opacity: 0.3; }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .reading-progress {
      height: 2px;
    }
  }
  
  /* Accesibilidad */
  @media (prefers-reduced-motion: reduce) {
    .reading-progress,
    .progress-bar {
      transition: none;
    }
    
    .progress-bar::after {
      animation: none;
    }
  }
</style>
